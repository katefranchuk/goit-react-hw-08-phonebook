{"version":3,"file":"static/js/182.32aec743.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.styled.jsx","components/AuthForm/AuthForm.jsx","pages/SignInPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const AuthorizationForm = styled.form`\n  width: ${({ theme }) => theme.spacing(100)};\n  padding: ${({ theme }) => theme.spacing(10)};\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: ${({ theme }) => theme.radii.normal};\n`;\n\nexport const Formtitle = styled.h2`\n  margin-bottom: ${({ theme }) => theme.spacing(8)};\n  text-align: center;\n`;\n\nexport const TextField = styled.div`\n  position: relative;\n  margin-bottom: ${({ theme }) => theme.spacing(8)};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.gray};\n`;\n\nexport const FormInput = styled.input`\n  width: 100%;\n  height: ${({ theme }) => theme.spacing(10)};\n  padding-inline: ${({ theme }) => theme.spacing(2)};\n  border: none;\n  background: none;\n  outline: none;\n\n  &:focus ~ label {\n    top: -8px;\n    color: ${({ theme }) => theme.colors.primary};\n  }\n  &:focus ~ span::before {\n    width: 100%;\n  }\n`;\n\nexport const FormLabel = styled.label`\n  position: absolute;\n  top: ${({ value }) => (value ? '-8px' : '50%')};\n  left: 8px;\n  transform: translateY(-50%);\n  color: ${({ theme }) => theme.colors.gray};\n  pointer-events: none;\n  transition: ${({ theme }) => theme.animation.cubicBezier};\n`;\n\nexport const FormSpan = styled.span`\n  ::before {\n    content: '';\n    position: absolute;\n    top: 40px;\n    left: 0;\n    width: 0%;\n    height: 2px;\n    background-color: ${({ theme }) => theme.colors.primary};\n    transition: ${({ theme }) => theme.animation.cubicBezier};\n  }\n`;\n\nexport const FormButton = styled.button`\n  display: block;\n  margin: 0 auto 28px;\n  padding: ${({ theme }) => theme.spacing(2)} ${({ theme }) => theme.spacing(5)};\n  background-color: ${({ theme }) => theme.colors.primary};\n  color: ${({ theme }) => theme.colors.white};\n  border-radius: ${({ theme }) => theme.radii.normal};\n  outline: none;\n  transition: ${({ theme }) => theme.animation.cubicBezier};\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.dark};\n  }\n`;\n\nexport const LogInLink = styled(Link)`\n  display: block;\n  text-align: center;\n`;\n","import { useState } from 'react';\nimport {\n  AuthorizationForm,\n  Formtitle,\n  TextField,\n  FormInput,\n  FormLabel,\n  FormSpan,\n  FormButton,\n  LogInLink,\n} from './AuthForm.styled';\n\nexport const AuthForm = ({ onSubmit, isLoginForm = false }) => {\n  const [userData, setUserData] = useState({\n    ...(!isLoginForm && { name: '' }),\n    email: '',\n    password: '',\n  });\n\n  const handleInput = event => {\n    const { name, value } = event.target;\n    setUserData({ ...userData, [name]: value.trim() });\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    onSubmit(userData);\n\n    formReset();\n  };\n\n  const formReset = () => {\n    setUserData({ name: '', email: '', password: '' });\n  };\n\n  const { name, email, password } = userData;\n\n  return (\n    <AuthorizationForm autoComplete=\"off\" onSubmit={handleFormSubmit}>\n      <Formtitle>\n        {isLoginForm ? 'Log in to continue' : 'Register to continue'}\n      </Formtitle>\n      {isLoginForm ? null : (\n        <TextField>\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            onChange={handleInput}\n            value={name}\n            id=\"name\"\n            required\n          />\n          <FormSpan></FormSpan>\n          <FormLabel htmlFor=\"name\" value={name}>\n            Name\n          </FormLabel>\n        </TextField>\n      )}\n      <TextField>\n        <FormInput\n          required\n          onChange={handleInput}\n          name=\"email\"\n          value={email}\n          type=\"email\"\n          id=\"email\"\n        />\n        <FormSpan></FormSpan>\n        <FormLabel htmlFor=\"email\" value={email}>\n          Email\n        </FormLabel>\n      </TextField>\n      <TextField>\n        <FormInput\n          type=\"password\"\n          required\n          onChange={handleInput}\n          autocomplete=\"current-password\"\n          // minLength={7}\n          name=\"password\"\n          value={password}\n          id=\"password\"\n        />\n        {/* <FormInput\n          required\n          onChange={handleInput}\n          minLength={7}\n          name=\"password\"\n          value={password}\n          \n          id=\"password\"\n          // type=\"password\"\n        /> */}\n        <FormSpan></FormSpan>\n        <FormLabel htmlFor=\"password\" value={password}>\n          Password\n        </FormLabel>\n      </TextField>\n      <FormButton type=\"submit\">\n        {isLoginForm ? 'Log In' : 'Sign In'}\n      </FormButton>\n      {isLoginForm ? (\n        <LogInLink to=\"/register\">Don't have account?</LogInLink>\n      ) : (\n        <LogInLink to=\"/login\">Already have account?</LogInLink>\n      )}\n    </AuthorizationForm>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { AuthForm } from 'components/AuthForm/AuthForm';\nimport { register } from 'redux/auth/authOperations';\nimport { BoxPerPage } from 'styledSystem/Box';\n\nconst SignInPage = () => {\n  const dispatch = useDispatch();\n\n  const handleRegister = formData => {\n    dispatch(register(formData));\n  };\n  return (\n    <BoxPerPage display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n      <AuthForm onSubmit={handleRegister} />\n    </BoxPerPage>\n  );\n};\n\nexport default SignInPage;\n"],"names":["AuthorizationForm","styled","theme","spacing","colors","white","radii","normal","Formtitle","TextField","gray","FormInput","primary","FormLabel","value","animation","cubicBezier","FormSpan","FormButton","dark","LogInLink","Link","AuthForm","onSubmit","isLoginForm","useState","name","email","password","userData","setUserData","handleInput","event","target","trim","formReset","autoComplete","preventDefault","type","onChange","id","required","htmlFor","autocomplete","to","dispatch","useDispatch","display","justifyContent","alignItems","formData","register"],"sourceRoot":""}